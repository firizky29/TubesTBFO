START -> STATEMENTS
STATEMENTS -> STATEMENT NEWLINE STATEMENTS | NEWLINE STATEMENTS | STATEMENTS NEWLINE | STATEMENT | NEWLINE
STATEMENT -> SIMPLE_STATEMENT | COMPOUND_STATEMENT
COMPOUND_STATEMENT -> DEF_STATEMENT | IF_STATEMENT | CLASS_STATEMENT | WITH_STATEMENT | FOR_STATEMENT | WHILE_STATEMENT
SIMPLE_STATEMENT -> ASSIGNMENT | STAR_EXPRESSIONS | RETURN_STATEMENT | IMPORT_STATEMENT | RAISE_STATEMENT | PASS | BREAK | CONTINUE 
BLOCK -> NEWLINE STATEMENTS | SIMPLE_STATEMENT

ATOM -> NAME | TRUE | FALSE | NONE | STRINGS | NUMBER | TUPLE | GROUP | GENERAL_EXPRESSION | DICT | LIST | SET

// Index processing
SLICE -> EXPRESSION | ASSIGNMENT_EXPRESSION | COLON | EXPRESSION COLON | COLON EXPRESSION | EXPRESSION COLON EXPRESSION | COLON COLON | EXPRESSION COLON COLON | COLON EXPRESSION COLON | EXPRESSION COLON EXPRESSION COLON | COLON COLON EXPRESSION | EXPRESSION COLON COLON EXPRESSION | COLON EXPRESSION COLON EXPRESSION | EXPRESSION COLON EXPRESSION COLON EXPRESSION
SLICES -> SLICE COMMA SLICES | SLICE

// Argument fungsi
KWARG_STARRED -> NAME EQ EXPRESSION | STAR EXPRESSION
KWARG_DOUBLE_STARRED -> NAME EQ EXPRESSION | STAR STAR EXPRESSION
KWARGS_STARRED -> KWARG_STARRED COMMA KWARGS_STARRED | KWARG_STARRED
KWARGS_DOUBLE_STARRED -> KWARG_DOUBLE_STARRED COMMA KWARGS_DOUBLE_STARRED | KWARG_DOUBLE_STARRED
KWARGS -> KWARGS_STARRED | KWARGS_DOUBLE_STARRED | KWARG_STARRED COMMA KWARGS_DOUBLE_STARRED
NORM_ARGUMENT -> STAR EXPRESSION COMMA NORM_ARGUMENT | ASSIGNMENT_EXPRESSION COMMA NORM_ARGUMENT | EXPRESSION COMMA NORM_ARGUMENT | STAR EXPRESSION | ASSIGNMENT | EXPRESSION
ARGS -> NORM_ARGUMENT | KWARGS | NORM_ARGUMENT COMMA KWARGS
ARGUMENTS -> ARGS COMMA ARGUMENTS | ARGS

// object 
OBJECT -> OBJECT DOT NAME | OBJECT GENERAL_EXPRESSION | OBJECT L_BRACHET ARGUMENTS R_BRACHET | OBJECT LS_BRACHET SLICES RS_BRACHET | ATOM
STAR_OBJECT -> LIST COMMA STAR_OBJECT | TUPLE COMMA STAR_OBJECT | OBJECT COMMA STAR_OBJECT | STAR OBJECT COMMA STAR_OBJECT | LIST | TUPLE | OBJECT | STAR OBJECT
LIST -> LS_BRACHET STAR_NAMED_EXPRESSIONS RS_BRACHET | LS_BRACHET RS_BRACHET
TUPLE -> L_BRACHET STAR_NAMED_EXPRESSIONS R_BRACHET | L_BRACHET R_BRACHET
GROUP -> L_BRACHET NAMED_EXPRESSION R_BRACHET
SET -> LC_BRACHET STAR_EXPRESSIONS RC_BRACHET
PAIR -> STAR STAR LOGIC_OBJECT | EXPRESSION COLON EXPRESSION
PAIRS -> PAIR COMMA PAIRS | PAIR
DICT -> LC_BRACHET PAIRS RC_BRACHET | LC_BRACHET RC_BRACHET
STRINGS -> STRING | STRING STRINGS

// Aritmatika 
SINGLETON -> UNARY_OP SINGLETON | OBJECT
IDENTIFIER -> NAME | OBJECT | L_BRACHET IDENTIFIER R_BRACHET | OBJECT DOT NAME | OBJECT LS_BRACHET SLICES RS_BRACHET
TERM -> SINGLETON BINARY_OP TERM | SINGLETON
ARITHMETIC_OBJECT -> ARITHMETIC_OBJECT PLUS TERM | ARITHMETIC_OBJECT MINUS TERM | TERM

// Logic
LOGIC_OBJECT -> ARITHMETIC_OBJECT LOGIC_OP LOGIC_OBJECT | ARITHMETIC_OBJECT

// Comparison
COMPARISON_OBJECT -> NOT COMPARISON_OBJECT | LOGIC_OBJECT COMPARISON_OP COMPARISON_OBJECT | LOGIC_OBJECT
COMPOUND_OBJECT -> COMPARISON_OBJECT BINARY_COMPARISON_OP COMPOUND_OBJECT | COMPARISON_OBJECT

// EXPRESSION
EXPRESSION -> COMPOUND_OBJECT IF COMPOUND_OBJECT ELSE EXPRESSION | COMPOUND_OBJECT
EXPRESSIONS -> EXPRESSION COMMA EXPRESSIONS | EXPRESSION
ASSIGNMENT_EXPRESSION -> NAME SPECIAL_ASSIGNMENT EXPRESSION
NAMED_EXPRESSION -> ASSIGNMENT_EXPRESSION | EXPRESSION
STAR_NAMED_EXPRESSION -> STAR LOGIC_OBJECT | NAMED_EXPRESSION
STAR_EXPRESSION -> STAR LOGIC_OBJECT | EXPRESSION
STAR_NAMED_EXPRESSIONS -> STAR_NAMED_EXPRESSION COMMA STAR_NAMED_EXPRESSIONS | STAR_NAMED_EXPRESSION
STAR_EXPRESSIONS -> STAR_EXPRESSION COMMA STAR_EXPRESSIONS | STAR_EXPRESSION

// Compound EXPRESSION
IF_EXPRESSION -> IF_EXPRESSION IF_EXPRESSION | IF COMPOUND_OBJECT
FOR_IF_EXPRESSION -> FOR STAR_OBJECT IN COMPOUND_OBJECT | FOR STAR_OBJECT IN COMPOUND_OBJECT IF_EXPRESSION
FOR_IF_EXPRESSIONS -> FOR_IF_EXPRESSION FOR_IF_EXPRESSIONS | FOR_IF_EXPRESSION
GENERAL_EXPRESSION -> NAMED_EXPRESSION FOR_IF_EXPRESSIONS  

// statement
ASSIGNMENT -> NAME COLON EXPRESSION | NAME COLON EXPRESSION EQ STAR_EXPRESSIONS | IDENTIFIER ASSIGNMENT_OP STAR_EXPRESSIONS

// Import
PACKAGE -> PACKAGE DOT NAME | NAME
PACKAGES -> PACKAGES AS NAME COMMA PACKAGES | PACKAGES DOT NAME COMMA PACKAGES | NAME COMMA PACKAGES| PACKAGES DOT NAME | NAME | PACKAGES AS NAME
FROM_PACKAGES -> STAR | PACKAGES
IMPORT_STATEMENT -> IMPORT PACKAGES | FROM ELIPSIS PACKAGE IMPORT FROM_PACKAGES | FROM ELIPSIS IMPORT FROM_PACKAGES | FROM PACKAGE IMPORT FROM_PACKAGES

// if statement
IF_STATEMENT -> IF NAMED_EXPRESSION COLON BLOCK | IF NAMED_EXPRESSION COLON BLOCK ELIF_STATEMENT | IF NAMED_EXPRESSION COLON BLOCK ELSE_STATEMENT
ELIF_STATEMENT -> ELIF NAMED_EXPRESSION COLON BLOCK | ELIF NAMED_EXPRESSION COLON BLOCK ELSE_STATEMENT | ELIF NAMED_EXPRESSION COLON BLOCK ELIF_STATEMENT
ELSE_STATEMENT -> ELSE COLON BLOCK

// while loop
WHILE_STATEMENT -> WHILE NAMED_EXPRESSION COLON BLOCK | WHILE NAMED_EXPRESSION COLON BLOCK ELSE_STATEMENT

// for loop
FOR_STATEMENT -> FOR STAR_OBJECT IN STAR_EXPRESSIONS COLON BLOCK | FOR STAR_OBJECT IN STAR_EXPRESSIONS COLON BLOCK ELSE_STATEMENT

// with statement
WITH_STATEMENT -> WITH L_BRACHET WITH_CONTENT R_BRACHET COLON BLOCK | WITH WITH_CONTENT COLON BLOCK
WITH_CONTENT -> WITH_CONTENT COMMA WITH_CONTENT | EXPRESSION AS STAR_OBJECT | EXPRESSION

DECORATORS -> (AT_SIGN NAMED_EXPRESSION NEWLINE )+ 

// class statement
CLASS_STATEMENT -> CLASS | DECORATORS CLASS_DEFINITION | CLASS_DEFINITION
CLASS_DEFINITION -> CLASS NAME [L_BRACHET [ARGUMENTS] R_BRACHET ] COLON BLOCK

// raise
RAISE_STATEMENT -> RAISE | RAISE EXPRESSION | RAISE EXPRESSION FROM EXPRESSION

// return
RETURN_STATEMENT -> RETURN | RETURN STAR_EXPRESSIONS

// def
DEF_STATEMENT -> DEF | DECORATORS DEF_DEFINITION | DEF_DEFINITION
DEF_DEFINITION -> DEF NAME L_BRACHET [PARAMS] R_BRACHET [ARROW EXPRESSION ] COLON BLOCK | DEF NAME L_BRACHET [PARAMS] R_BRACHET [ARROW EXPRESSION ] COLON BLOCK

// DEF_PARAMS
PARAMS -> PARAMETERS
PARAMETERS -> SLASH_NO_DEFAULT PARAM_NO_DEFAULT* PARAM_WITH_DEFAULT* [STAR_ETC] | SLASH_WITH_DEFAULT PARAM_WITH_DEFAULT* [STAR_ETC] | PARAM_NO_DEFAULT+ PARAM_WITH_DEFAULT* [STAR_ETC] | PARAM_WITH_DEFAULT+ [STAR_ETC] | STAR_ETC 

// SLASH_PARAMS
SLASH_NO_DEFAULT -> PARAM_NO_DEFAULT+ SLASH COMMA | PARAM_NO_DEFAULT+ SLASH &R_BRACHET 
SLASH_WITH_DEFAULT -> PARAM_NO_DEFAULT* PARAM_WITH_DEFAULT+ SLASH COMMA | PARAM_NO_DEFAULT* PARAM_WITH_DEFAULT+ SLASH &R_BRACHET 
STAR_ETC -> STAR PARAM_NO_DEFAULT PARAM_MAYBE_DEFAULT* [KWDS] | STAR COMMA PARAM_MAYBE_DEFAULT+ [KWDS] | KWDS 
KWDS -> DOUBLE_STARS PARAM_NO_DEFAULT 

PARAM_NO_DEFAULT -> PARAM COMMA | PARAM &R_BRACHET 
PARAM_WITH_DEFAULT -> PARAM DEFAULT COMMA | PARAM DEFAULT &R_BRACHET 
PARAM_MAYBE_DEFAULT -> PARAM DEFAULT? COMMA | PARAM DEFAULT? &R_BRACHET 
PARAM -> NAME ANNOTATION? 

ANNOTATION -> COLON EXPRESSION
DEFAULT -> EQ EXPRESSION







ASSIGNMENT_OP -> + = | - = | * = | @ = | / = | % = | & = | OR_OP = | ^ = | < < = | > > = | * * = | / / = | =
SPECIAL_ASSIGNMENT -> : =
UNARY_OP -> PLUS | MINUS | TILDE
BINARY_OP -> * | / | / / | % | @ | * *
LOGIC_OP -> > > | < < | & | ^ | OR_OP
EXISTENTIAL_OP -> NOT IN | IN
SIMILARITY_OP -> IS NOT | IS
COMPARISON_OP -> < | > = | < | < = | = = | ! = | EXISTENTIAL_OP | SIMILARITY_OP
BINARY_COMPARISON_OP -> AND | OR
ELIPSIS -> DOT | DOT DOT DOT | ELIPSIS ELIPSIS


COMMA -> ,
COLON -> :
PLUS -> +
MINUS -> -
TILDE -> ~
STAR -> *
DOUBLE_STARS -> **
ARROW -> ->
DOT -> .
EQ -> =
SLASH -> /
AT_SIGN -> @
LC_BRACHET -> {
RC_BRACHET -> }
LS_BRACHET -> [
RS_BRACHET -> ]
L_BRACHET -> (
R_BRACHET -> )
NEWLINE -> NEWLINE NEWLINE | __nl__
OR_OP -> __or__


FALSE -> A
CLASS -> B
IS -> C
RETURN -> D
NONE -> E
CONTINUE -> F
FOR -> G
TRUE -> H
DEF -> I
FROM -> J
WHILE -> K
AND -> L
NOT -> M
WITH -> N
AS -> O
ELIF -> P
IF -> Q
OR -> R
ELSE -> S
IMPORT -> T
PASS -> U
BREAK -> V
IN -> W
RAISE -> X
NAME -> v
NUMBER -> n
STRING -> s
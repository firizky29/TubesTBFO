START -> STATEMENTS
STATEMENTS -> STATEMENT NEWLINE STATEMENT | NEWLINE STATEMENT | STATEMENT NEWLINE
STATEMENT -> ASSIGNMENT | STAR_EXPRESSIONS | RETURN_STATEMENT | IMPORT_STATEMENT | RAISE_STATEMENT | PASS | BREAK | CONTINUE | DEF_STATEMENT | IF_STATEMENT | CLASS_STATEMENT | WITH_STATEMENT | FOR_STATEMENT | WHILE_STATEMENT

ATOM -> NAME | TRUE | FALSE | NONE | STRINGS | NUMBER | TUPLE | GROUP | GENERAL_EXPRESSION | DICT | LIST | SET

// Index processing
SLICE -> EXPRESSION | ASSIGNMENT_EXPRESSION | COLON | EXPRESSION COLON | COLON EXPRESSION | EXPRESSION COLON EXPRESSION | COLON COLON | EXPRESSION COLON COLON | COLON EXPRESSION COLON | EXPRESSION COLON EXPRESSION COLON | COLON COLON EXPRESSION | EXPRESSION COLON COLON EXPRESSION | COLON EXPRESSION COLON EXPRESSION | EXPRESSION COLON EXPRESSION COLON EXPRESSION
SLICES -> SLICE COMMA SLICES | SLICE

// Argument fungsi
KWARG_STARRED -> NAME EQ EXPRESSION | STAR EXPRESSION
KWARG_DOUBLE_STARRED -> NAME EQ EXPRESSION | STAR STAR EXPRESSION
KWARGS_STARRED -> KWARG_STARRED COMMA KWARGS_STARRED | KWARG_STARRED
KWARGS_DOUBLE_STARRED -> KWARG_DOUBLE_STARRED COMMA KWARGS_DOUBLE_STARRED | KWARG_DOUBLE_STARRED
KWARGS -> KWARGS_STARRED | KWARGS_DOUBLE_STARRED | KWARG_STARRED COMMA KWARGS_DOUBLE_STARRED
NORM_ARGUMENT -> STAR EXPRESSION COMMA NORM_ARGUMENT | ASSIGNMENT_EXPRESSION COMMA NORM_ARGUMENT | EXPRESSION COMMA NORM_ARGUMENT | STAR EXPRESSION | ASSIGNMENT | EXPRESSION
ARGS -> NORM_ARGUMENT | KWARGS | NORM_ARGUMENT COMMA KWARGS
ARGUMENTS -> ARGS COMMA ARGUMENTS

// object 
OBJECT -> OBJECT DOT NAME | OBJECT GENERAL_EXPRESSION | OBJECT L_BRACHET ARGUMENTS R_BRACHET | OBJECT LS_BRACHET SLICES RS_BRACHET | ATOM
LIST -> LS_BRACHET STAR_NAMED_EXPRESSIONS RS_BRACHET | LS_BRACHET RS_BRACHET
TUPLE -> L_BRACHET STAR_NAMED_EXPRESSIONS R_BRACHET | L_BRACHET R_BRACHET
GROUP -> L_BRACHET NAMED_EXPRESSION R_BRACHET
SET -> LC_BRACHET STAR_EXPRESSIONS RC_BRACHET
PAIR -> STAR STAR LOGIC_OBJECT | EXPRESSION COLON EXPRESSION
PAIRS -> PAIR COMMA PAIRS -> PAIR
DICT -> LC_BRACHET PAIRS RC_BRACHET | LC_BRACHET RC_BRACHET

// Aritmatika 
SINGLETON -> UNARY_OP SINGLETON | OBJECT
TERM -> SINGLETON BINARY_OP TERM | SINGLETON
ARITHMETIC_OBJECT -> ARITHMETIC_OBJECT PLUS TERM | ARITHMETIC_OBJECT MINUS TERM | TERM

// Logic
LOGIC_OBJECT -> ARITHMETIC_OBJECT LOGIC_OP LOGIC_OBJECT | ARITHMETIC_OBJECT

// Comparison
COMPARISON_OBJECT -> NOT COMPARISON_OBJECT | COMPARISON_OBJECT AND | LOGIC_OBJECT COMPARISON_OP COMPARISON_OBJECT | LOGIC_OBJECT
COMPOUND_OBJECT -> COMPARISON_OBJECT BINARY_COMPARISON_OP COMPOUND_OBJECT | COMPARISON_OBJECT

// Expression
EXPRESSION -> COMPOUND_OBJECT IF COMPOUND_OBJECT ELSE EXPRESSION | COMPOUND_OBJECT
EXPRESSIONS -> EXPRESSION COMMA EXPRESSIONS | EXPRESSION
ASSIGNMENT_EXPRESSION -> NAME SPECIAL_ASSIGNMENT EXPRESSION
NAMED_EXPRESSION -> ASSIGNMENT_EXPRESSION | EXPRESSION
STAR_NAMED_EXPRESSION -> STAR LOGIC_OBJECT | NAMED_EXPRESSION
STAR_EXPRESSION -> STAR LOGIC_OBJECT | EXPRESSION
STAR_NAMED_EXPRESSIONS -> STAR_NAMED_EXPRESSION COMMA STAR_NAMED_EXPRESSIONS | STAR_NAMED_EXPRESSION
STAR_EXPRESSIONS -> STAR_EXPRESSION COMMA STAR_EXPRESSIONS | STAR_EXPRESSION

// Compound Expression
IF_EXPRESSION -> IF_EXPRESSION IF_EXPRESSION | IF COMPOUND_OBJECT
FOR_IF_EXPRESSION -> FOR {{{SESUATU, <-- TO DO}}} IN COMPOUND_OBJECT | FOR {{{SESUATU, <-- TO DO}}} IN COMPOUND_OBJECT IF_EXPRESSION
FOR_IF_EXPRESSIONS -> FOR_IF_EXPRESSION FOR_IF_EXPRESSIONS | FOR_IF_EXPRESSION
GENERAL_EXPRESSION -> NAMED_EXPRESSION FOR_IF_EXPRESSIONS  



ASSIGNMENT_OP -> + = | - = | * = | @ = | / = | % = | & = | OR_OP = | ^ = | < < = | > > = | * * = | / / = 
SPECIAL_ASSIGNMENT -> : =
UNARY_OP -> PLUS | MINUS | TILDE
BINARY_OP -> * | / | / / | % | @ | * *
LOGIC_OP -> > > | < < | & | ^ | OR_OP
EXISTENTIAL_OP -> NOT IN | IN
SIMILARITY_OP -> IS NOT | IS
COMPARISON_OP -> < | > = | < | < = | = = | ! = | EXISTENTIAL_OP | SIMILARITY_OP
BINARY_COMPARISON_OP -> AND | OR


COMMA -> ,
SEMICOLON -> :
PLUS -> +
MINUS -> -
TILDE -> ~
STAR -> *
DOT -> .
EQ -> =
LC_BRACHET -> {
RC_BRACHET -> }
LS_BRACHET -> [
RS_BRACHET -> ]
L_BRACHET -> (
R_BRACHET -> )
SPACE -> SPACE SPACE | sp
NEWLINE -> NEWLINE NEWLINE | nl
OR_OP -> or


FALSE -> A
CLASS -> B
IS -> C
RETURN -> D
NONE -> E
CONTINUE -> F
FOR -> G
TRUE -> H
DEF -> I
FROM -> J
WHILE -> K
AND -> L
NOT -> M
WITH -> N
AS -> O
ELIF -> P
IF -> Q
OR -> R
S -> S
IMPORT -> T
PASS -> U
BREAK -> V
IN -> W
RAISE -> X
NAME -> v
NUM -> n
STRING -> s